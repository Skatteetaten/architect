// Code generated by go-bindata.
// sources:
// liveness_std.sh
// logback.xml
// readiness_std.sh
// run_tools.sh
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _liveness_stdSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x91\xbd\x8e\xdb\x30\x10\x84\x7b\x3e\xc5\x04\xaa\x2d\xfa\x02\xa4\x71\x1b\xe7\xea\x00\x29\x83\x14\x94\x34\x96\xd7\xe2\x8f\xc0\x5d\x19\x97\x07\xf2\x3b\xa4\xf7\x8b\x05\x34\xee\x7c\x5b\x2d\x77\xf0\xcd\x2c\xb8\xdd\x17\xbf\x69\xf5\x83\x64\xcf\x7c\xc5\x10\xf4\xec\x5c\x87\x23\xcd\x08\x56\xd0\xb0\xc6\x30\xf2\x5c\xe2\xc4\x0a\x1d\xab\xac\x86\x53\xa9\x88\x72\x65\xa6\x2a\xd6\x5a\x06\xa6\xbe\x31\x68\x13\x23\x26\x66\xcc\x97\xfb\xbf\xda\x2c\xee\x37\x54\xda\x56\x33\x2b\xb1\xef\x5d\x87\xd7\x87\x62\x8d\xd4\x0b\x17\xc3\xd0\xa8\x94\x5a\x00\xe7\x87\xfb\xfd\x06\x49\x6b\x64\x62\xb6\xc6\xd1\x3e\x03\xdf\x97\x60\xc5\x44\xc3\x55\x16\x93\xb9\x01\xa7\x52\xd5\xee\x37\xd7\x3d\xba\xe5\xc2\x18\x99\x91\x18\x63\x49\xa8\x0c\x93\x34\xbc\xc7\x6b\xa9\x68\x59\x92\x4f\xa5\xa6\xa0\x97\x92\xa1\xc4\xd9\x6c\x3d\x78\xbf\x6c\x03\x6b\xa6\x51\x7b\x29\x7e\x2a\xa3\xfa\x4d\x59\x77\xf3\x26\x13\xfd\x5a\xa6\x9d\x5a\x30\xaa\x77\x1d\x7e\x2c\xda\xe3\xf8\x1d\x63\xc9\x27\x99\x5d\x87\x5d\x6b\x2d\x48\x66\xd5\x83\xeb\xd0\xb7\x72\x1d\x5a\x7d\xec\xff\xb3\xfd\xd7\xe1\x7d\x08\xf0\x8d\xe3\xe7\x0b\x18\x4b\x4a\x21\x4f\x07\xfc\xf6\xdb\xfe\xc5\x87\x75\x8d\x32\x06\x93\x92\x1f\x57\xfa\x70\xe9\xf5\xfc\xe7\x49\x49\x16\x93\x10\x8f\x8c\xe1\xef\x2f\x8e\x25\x4f\x7a\xc0\xcb\xb7\xa7\x6e\x92\x58\x36\x7b\x4a\x5f\x9d\xe3\x9b\x18\xf6\xee\x7f\x00\x00\x00\xff\xff\x95\x2e\xa5\x56\x00\x02\x00\x00")

func liveness_stdShBytes() ([]byte, error) {
	return bindataRead(
		_liveness_stdSh,
		"liveness_std.sh",
	)
}

func liveness_stdSh() (*asset, error) {
	bytes, err := liveness_stdShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "liveness_std.sh", size: 512, mode: os.FileMode(493), modTime: time.Unix(1499772011, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _logbackXml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x54\xdf\x4f\xdb\x30\x10\x7e\xe7\xaf\xb8\x59\x8a\x78\x21\x09\x6c\x62\x1a\x28\x0d\x1a\xdd\x3a\x40\x2d\x20\xda\x6a\x95\xa6\x3d\x78\xc9\xd5\x35\x38\xbe\xcc\x71\x58\x0a\xe2\x7f\x9f\x9c\x5f\x2b\x30\xa6\xed\x75\x4f\xb5\xcf\x77\xdf\x7d\xdf\xd7\xcb\x45\x47\x55\xa6\xe0\x16\x4d\x21\x49\x0f\xd8\x5e\xb0\xcb\x00\x75\x42\xa9\xd4\x62\xc0\xe6\xb3\x91\xff\x8e\x1d\xc5\x5b\x51\x42\x7a\x29\x45\x69\xb8\x95\xa4\xe3\x2d\x80\xe8\x95\xef\xc3\x19\x29\xba\x91\x1c\xce\x26\x0b\xdf\xaf\xa3\xd7\x59\x35\xec\x53\xc9\x40\x58\x47\xa5\x4e\x54\x99\x22\x50\xee\xca\xb9\x1a\x30\x6b\x4a\x64\x60\xb0\xa0\xd2\x24\x38\x60\xbc\x34\x64\xb8\xaf\x48\x7c\xe3\xc9\x4d\x50\x65\x8a\x85\x7d\x9b\x69\x99\xe7\x64\x2c\x28\x12\xa0\xf0\x16\x15\x24\x2b\xae\x05\xc2\x92\x0c\x9c\xf1\x5b\x0e\x73\x2b\x15\x8c\x49\x08\xa9\x05\xb4\x54\x12\xd2\x16\x2b\x3b\x96\x85\x45\x8d\x06\x12\xc5\x8b\x62\xc0\x92\x55\xf0\x9d\x8a\xa0\xeb\x54\x47\x65\x12\x5c\x97\x2a\x18\x3b\xec\x61\x0d\x7d\x69\x28\xe7\xc2\x49\x60\xad\x06\x9e\xe7\xa8\x53\x34\xa0\x79\x86\x03\x36\x9d\x7d\xb8\x98\xcf\xd8\x4b\xa8\x64\x30\x18\x92\x2e\x48\xe1\xfb\xb6\x90\x39\x18\x80\xa8\xb6\x17\x4d\x73\x73\x3c\x57\xdc\x14\x68\xe3\xda\xec\x28\xec\xae\xdd\x73\xce\xad\x45\xa3\x63\x2f\xbd\x67\xeb\xf5\x7a\xed\x4f\x26\x7e\x9a\x6e\xcf\xb6\x4f\x4e\x0e\xb3\xec\xb0\x28\x76\xa6\xd3\xe9\x62\xb1\x60\x3b\x30\x9f\x0d\x1f\xe0\x8b\xe7\x1f\x04\x07\x76\x65\x90\xa7\x5f\xc1\xf3\xf7\x1b\xc7\x3c\x45\x42\xa0\xb9\x7f\xf3\xf6\x01\xbc\x05\xf8\xe0\x65\x85\x00\x4f\x7b\xe6\x63\x75\xbf\x2c\x95\x7a\x88\xc2\xae\x55\xc3\x33\xdc\x20\x1a\x85\x9d\xfc\xdf\x79\x71\x75\x31\x1e\x9f\x9e\x7f\xfa\xa3\x19\x86\x94\x92\x5a\x04\x57\xcd\xef\x48\x3e\x37\x66\x29\x15\xc6\x8a\x44\xe1\x9a\x29\x99\xd4\xb3\xe6\x50\xa2\xb0\x7e\x6a\xb2\x5a\xa0\x4b\x52\x32\x59\xff\x4d\xc7\x91\xac\x30\xfd\x2c\x75\x4a\x3f\xae\x36\x6b\x59\x6f\xb1\x43\x3f\xe7\x19\x5e\xb6\xfa\x9f\x71\xf0\xa4\x83\x0e\xc4\x5d\xc3\x64\x33\xb7\xc3\xc8\xa4\x3e\xd5\x29\x56\xf1\x5e\x14\xf6\xe7\xfe\x91\x57\x4d\xe0\x75\x14\xf6\xe7\xd6\xe5\x47\x7a\xda\xa0\x35\xd2\xfd\x59\xff\x24\x73\x2a\xef\xf0\x98\x17\x98\xce\x9e\x14\xb3\x4d\x1a\xce\x77\x97\x19\xef\xef\x4e\x8e\x6b\x32\x7d\xa4\xe5\xf3\xb4\xf7\xff\x33\xb5\x86\xc8\x36\xfb\x63\xc0\x4e\xcf\x47\x17\xdd\xdc\x75\x49\xbe\xc1\x25\x18\x5c\xfe\xfa\xb8\xc3\x17\x33\xfa\x91\x6f\x96\x43\xe8\xb0\xe3\xad\x28\x7c\xbc\x27\x7f\x06\x00\x00\xff\xff\x15\xfe\x06\x9a\x5e\x05\x00\x00")

func logbackXmlBytes() ([]byte, error) {
	return bindataRead(
		_logbackXml,
		"logback.xml",
	)
}

func logbackXml() (*asset, error) {
	bytes, err := logbackXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "logback.xml", size: 1374, mode: os.FileMode(420), modTime: time.Unix(1499776426, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _readiness_stdSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x93\xd1\x6e\xdb\x36\x14\x86\xef\xf9\x14\x7f\x25\x2f\xd8\x2e\x64\xc9\x1d\x0a\xb4\x1e\xb2\xc1\xb0\xbd\x65\x98\x9b\x04\x89\x7b\x15\x04\x2e\x2d\x1e\xcb\x8c\x28\x52\x20\x29\xa5\x9d\x97\xc7\xc9\x3b\xec\x3e\x2f\x36\x50\x4e\xe4\xb4\x33\xaf\xcc\x73\x0e\xbf\xf3\x9f\xdf\x47\xf1\x9b\xb4\x71\x36\x5d\x4b\x9d\x92\x6e\xb1\xe6\x6e\xcb\x58\x8c\x19\x69\x4d\xb0\xc4\x85\xd4\xe4\x1c\x6a\x6b\xd6\x54\xa1\x90\x16\x6b\x72\xe5\x1d\x09\x78\xa9\x40\x5a\x50\xdd\xe8\xd2\xa3\x34\xda\x5b\xa3\x14\x59\xd2\xd0\x4f\x8f\x16\x82\x34\xc8\xa2\x54\xdc\x76\xb5\x4f\x8f\xa8\x8c\xf7\x1c\x1b\x63\xc9\xd5\x4f\xff\x5a\xa7\xc8\x0e\x59\x8c\x05\xb5\x64\xb9\x76\x54\xf3\xb2\x24\xac\xbf\x16\x45\x87\x51\x14\x7e\xc0\xd4\x75\x07\xe0\x3e\xc8\x70\x77\x54\x7a\xb2\x70\xa4\x5a\x94\x3c\x54\xb5\x64\x09\x4e\x6a\x02\x15\xda\xd1\x5e\xac\x85\x33\x55\x10\xa1\x69\x18\xc6\x61\x31\xaa\xa7\x47\x6c\xc9\xbf\x9a\x6b\xe8\xb6\x30\x05\x94\x2c\x0a\x42\xa3\x05\x59\x04\x2b\x20\xf7\xd4\x5e\x93\x1e\x82\xc5\xb8\x0c\x5c\xdd\x61\xe8\x8b\xf4\xa8\x48\x20\x83\x20\x1b\x3a\xb9\x26\xcf\x03\x11\x13\x2d\x2c\xa1\x25\x2b\x24\x59\xb4\x52\xa1\x22\x25\x08\xb9\xd1\x9e\x4b\xdd\x4d\xd6\x78\xf0\x16\xfe\x8e\x34\x39\x4f\xf8\xd1\x91\x6d\x65\x4e\x07\x3f\xe9\x27\x16\xe3\x77\x63\x51\x91\x85\xd4\x1b\x69\x2b\xee\xee\x8c\x86\x23\x6c\xbd\xaf\xc7\x69\x5a\x36\x6b\xb2\x9a\x3c\xb9\xa1\x34\xa9\x30\xb9\x4b\x1b\x47\x36\x29\x1a\x29\x28\xad\x8d\x48\x9c\xe7\x9e\x5c\xca\x62\xcc\x4b\x37\xc4\x6c\x1a\x34\x6c\x64\xc1\x62\x24\x07\x39\x6e\xcc\x62\x0c\xc3\x61\x31\xc2\xe9\xdd\xe9\xe6\x1d\x3f\x47\x01\xfa\x42\xf9\xe1\x06\xe4\xa6\xaa\xb8\x16\x63\xdc\xa4\x4d\x36\x4a\x79\x5d\x2b\x99\x73\x2f\x8d\xee\xd6\xe9\xb5\xc9\xb7\xfd\x33\xa9\xa5\x97\x5c\xcd\x48\xf1\xaf\xd7\x94\x1b\x2d\xdc\x18\xa3\x77\x7d\xde\xcb\x8a\x4c\xe3\xfb\xd4\x5b\xc6\x98\xdc\xe0\x06\xc9\xdf\x88\x06\x67\xcb\xe5\xe5\xea\xf2\xe2\x6a\x19\xe1\xf6\x17\xf8\x2d\x69\x06\xf4\xc1\xd3\xf7\xd9\xfb\x8c\x6d\xe4\xeb\x17\x1f\x27\xe7\x93\x3f\xe6\x1f\xe7\xe7\xcb\xd5\xd1\xc7\xc7\xf2\x81\x33\xea\x38\xdd\x6d\xb0\xeb\x33\x0f\xcf\xe8\x37\x7b\xf8\xd5\x7c\x32\xfb\xf3\x7c\x7e\x7d\xbd\xba\x38\x5f\xbd\x22\x7d\xdf\x64\x8f\x39\xd6\xea\xa0\xf6\x7f\xc8\xe9\xd9\x7c\xfa\xd7\xea\xd3\xd5\xe2\x9b\x59\xe7\x93\xc5\xf2\x2c\x44\x4f\xa3\xe7\x3d\x50\x26\xe7\x6a\x6b\x9c\x1f\x0f\x76\x9d\xc6\xc1\xee\x08\xe4\x21\x62\xc0\x7d\x41\x1e\x89\x0b\x46\xf6\x9c\x08\x27\xbf\x22\x15\xd4\xa6\xba\x51\x8a\xb1\x38\xc6\x35\xaf\x6a\x15\x16\x56\x10\x1a\x27\x75\x81\xe9\xa7\xab\x05\xee\xa5\xdf\x76\xcb\xd7\x65\x58\xdc\x0d\x31\xbd\x98\xcd\x4f\x3f\xe7\x8d\x55\x48\x2a\x8c\x32\x24\x6e\x81\xe4\x1e\xd1\x0f\xbb\x50\xba\x0a\xa5\x0f\x11\xa2\xc1\xee\xd0\xf2\x21\x42\x62\x0e\x3d\x3f\xb3\x38\x38\x70\xf3\xf2\xff\x06\x64\x84\xa4\x20\xbc\xcd\x32\x9c\x9c\x7c\x17\x57\x84\x9f\x3f\x7c\xc0\xed\x8b\x29\x31\xf6\x5f\x63\xc6\x62\x52\x8e\xfa\xfb\x88\xc5\xc1\xdc\xe7\xdb\xe0\xb7\xce\x6a\xa7\x88\x6a\x64\xc3\x77\xf8\x07\x9e\x94\x26\x8f\xde\x3f\x1c\xd6\xeb\x5b\x4f\x5e\x00\xff\x05\x00\x00\xff\xff\x21\x86\x19\x4b\x2c\x05\x00\x00")

func readiness_stdShBytes() ([]byte, error) {
	return bindataRead(
		_readiness_stdSh,
		"readiness_std.sh",
	)
}

func readiness_stdSh() (*asset, error) {
	bytes, err := readiness_stdShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "readiness_std.sh", size: 1324, mode: os.FileMode(493), modTime: time.Unix(1499772011, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _run_toolsSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x6d\x73\xdb\x36\x12\xfe\x8e\x5f\xb1\x65\x38\xb5\x9d\x31\x4d\x2b\x6d\x67\x5a\x39\xbc\x1b\x9d\x44\xc7\xba\xca\xa2\x46\xa2\x7b\xcd\x79\x3c\x1c\x98\x84\x24\x5c\x29\x80\x07\x50\x72\x6c\x47\xff\xfd\x06\x00\xdf\xfd\x72\x49\xfb\x25\xf9\x14\x03\xfb\xf6\xec\x3e\xbb\x0b\x6a\xb9\x65\x71\x4e\x39\x83\x58\x10\x9c\x93\x48\x66\xe9\x96\xfd\x11\xc9\x1c\xb3\x07\x7c\x78\x84\x1e\x11\x00\xc0\x62\x36\xb9\x9a\xfe\x1a\x8d\xa7\x23\xff\x77\xcf\xb2\x7b\x96\x3e\x0d\xae\xc2\xd9\x55\x18\x9d\x8f\x27\xbe\x67\xd9\xef\xac\xa6\xe8\x22\x1c\x4c\xff\x3d\xf0\x2c\xfb\x07\x0b\xe9\x73\xba\x84\x6b\x70\x18\x58\x76\xd3\x98\x05\x37\x67\x90\xaf\x09\x33\x42\xb5\xe0\x43\x2d\x68\x4c\x59\x50\x89\x42\xe3\xdf\x1b\x18\x33\x08\x32\xc2\xe4\x9a\x2e\x73\x75\x0f\x6b\x2e\x73\x60\x78\x43\x80\x4a\x7d\x20\xd5\xff\xb1\x84\x8c\x27\xfa\xfc\x04\xc2\x35\xa9\xfe\x3a\x86\xdb\x7b\x88\x39\xdb\x11\xa6\x12\x71\x5c\x6a\xe1\x2c\x4b\x69\x8c\x75\x72\xb4\xb5\x25\x4f\x53\x7e\x47\x92\x8e\xff\xdb\x7b\xc0\x90\x60\xb9\x3e\xd6\xd1\x69\xdd\x84\x64\x29\xbf\xdf\x10\x96\x03\x65\x09\xf9\x54\xe9\x3e\x91\x5e\x52\x86\xd3\x54\x1d\xfe\x04\x29\xc9\x73\x22\x40\x60\x96\xf0\x8d\x8e\x8f\x26\x2a\xa8\x25\x25\xe2\xa4\xe3\xd5\xff\x84\x37\x59\x4a\xfa\x80\xb7\x82\x0b\xec\xf0\x32\x05\x4e\xcc\x99\xe4\x29\x71\x7e\xe9\x39\x0f\x0f\x0f\x2b\xdc\x51\xfc\x17\x81\x18\xeb\x28\x05\x59\x72\xa1\x62\x15\x74\x47\x5e\x80\x2c\xf8\xa6\x93\xd3\xdb\x7b\x10\x64\xc3\x77\x94\xad\x9e\x87\x8a\x59\xa2\x2f\x32\xde\xcd\x54\x03\x0d\x8c\x73\xb8\xe3\xdb\x34\x81\x5b\x02\xb7\x06\x77\xce\x61\x45\x4c\x09\x07\xb3\x59\x34\x1d\x5c\xfa\xaa\x6a\x98\x01\xf9\xa4\xe2\xa2\x39\x64\x58\xe0\x0d\xc9\x89\x38\x86\xdb\xad\x12\xa5\x52\xa3\xe1\x2c\xbd\x57\x96\x70\xbc\xa6\x64\xa7\xd3\xdc\xf1\x9d\x61\x29\x55\xc8\x34\xd7\x36\x41\x90\xff\x6e\xa9\x20\x09\x10\xb6\xa3\x82\x33\x0d\x60\x87\x05\xc5\xb7\x29\x01\x6a\xca\x38\xaa\xb1\x0d\x39\x5b\xd2\x15\x1c\xde\xad\x69\xbc\x56\x14\x61\x3c\x87\x84\x48\x65\xe3\xa8\x5d\x9c\x32\x78\xcf\x3e\x24\xf1\x9a\x83\x7d\x11\x2c\x42\x8d\xe6\x33\x48\x92\x80\x23\xc0\x21\x70\x20\xdd\x43\xe7\xfa\xd4\xf9\xe5\xe6\xb1\x77\xdc\x3b\xdd\x1f\x3d\x9e\x1e\xf7\xf6\xce\x35\x76\x1e\xf4\xe1\x4f\x7b\xdb\x75\x57\x07\x47\xa8\x65\x3b\xc6\x39\xbc\x7f\x0f\x7e\x70\x0e\x7f\x03\xbb\xd1\x80\xe8\x0d\x38\x8e\x03\x32\xc7\x22\x77\x4d\xf7\xc2\x22\x1c\x05\x57\x21\xba\xde\x70\x46\x73\x2e\xfa\xae\x7b\xe2\xa6\x7c\x25\xdd\xb7\x27\x29\x5f\xdd\xa0\x84\x4a\x85\x36\x01\x0f\x96\x38\x95\x04\x19\x96\x86\x98\xa6\xe0\xc1\x29\x92\x7c\x2b\x62\x92\xdf\x67\x04\x3c\x48\xf9\xea\xc7\xff\x20\x53\x62\x0f\x5a\x4d\x8c\xa2\x0d\xc9\x31\x78\xcd\x5c\xf6\xfb\xf6\x2c\x18\xe9\x3c\x2c\x66\x83\xa1\xdf\xe4\x56\xbf\x6f\x3f\x96\x49\xda\x03\xe3\x89\xf6\xd1\xef\x57\x1c\x46\x9a\x6e\x5e\x9d\xb9\x02\x1d\x61\x49\x81\x0d\x3d\x87\x77\x30\x1c\xfa\x8b\x45\x34\x09\x3e\x3c\x8b\x19\xc7\x31\x91\xf2\x2b\x61\x1b\xa5\x28\xe6\x9b\x5b\xca\x48\xf2\x6d\x27\xe0\xc3\x10\x5e\x02\xbf\x8a\xbf\x12\xf8\x2a\x8e\x52\xbe\xfa\x76\xf0\xfa\xc1\x79\xd5\x09\x44\x05\xdf\x6c\x0b\xdd\x67\x0e\x01\xcb\x7e\x6c\x2d\x8d\xbd\x55\xf4\x9c\x25\xdd\xc2\x45\x3d\x28\xd5\x81\xdb\x75\xec\xae\xce\xa4\x5b\x81\x70\x66\x93\xc1\xd0\xbf\x08\x26\x23\x7f\xee\xb6\xf1\x69\x41\x9d\x8d\xb6\x50\x33\x4f\xee\xca\xea\xb6\x69\x19\xf1\x92\xa2\x0e\x92\x0a\xc3\x94\xb7\xf6\x2d\x64\x82\x48\xc2\xf2\x63\xb8\xa3\x69\xaa\xe7\x8e\x29\x0a\x65\x85\xdc\x89\xd9\xbc\x4b\x8a\xf6\x08\xa1\x6a\xa3\xa7\x1c\x27\x91\x59\x0f\x51\xac\xc7\xd7\xe1\x11\xa8\x7d\x9e\xf2\x18\xa7\xb0\xf8\x78\x39\x19\x4f\x7f\x8d\xce\x75\xe0\x9e\xdd\xab\x6e\x86\xc1\xf4\x7c\xfc\x21\xfa\xc7\x60\xe1\x47\xa3\xf1\xdc\xb3\xdf\x35\xae\x2e\x67\x13\x3f\xf4\xa3\xdf\xfc\xf9\x62\x1c\x4c\x3d\xfb\x87\xea\x4e\x55\xb8\x3a\xfe\x11\xa1\xae\x3d\x6d\xaa\x63\xdb\x35\x81\x6d\x70\x56\xc7\xe5\x0f\xe7\x7e\xf8\xbc\xb4\x24\xb1\x20\xb9\xb2\x5c\xdc\x54\xfe\x0e\x97\x94\x25\x05\xcc\x68\x47\x84\x54\x19\xb0\x1f\xbb\xf1\xee\xc1\x30\xb1\xf1\x67\x1d\xdd\xfe\x08\x15\xcf\x0f\xfb\xef\xf0\x9d\x07\xa7\x9d\x17\x87\xae\x90\x2a\x8f\x51\x81\x0d\xdf\xb2\x9c\x24\xb0\xe4\xc2\xac\xa2\x06\xe5\x55\x49\xaa\xe2\x1a\xc5\x42\xcb\xc4\xb8\x15\x66\xcd\x52\x09\x19\x65\x8c\x24\x6a\xfd\xd9\x6d\x54\xc5\xcb\x29\x65\xe0\xc8\xea\x4e\xa5\xa1\x23\x77\x92\x09\x9e\x11\x91\x53\x22\xc1\x6e\x97\xd5\x25\x6c\xd7\xb8\x36\xd1\x7c\xca\xb8\xc8\x61\x70\x35\x0f\xe6\x83\xc8\x9f\xfe\x16\xcd\xe6\xfe\xf9\xf8\x77\xef\x15\x17\x2f\x2a\x06\x33\x7f\x1e\x8e\xfd\x85\xf7\xc5\x8e\xa3\xfa\x34\x5a\xd2\x94\x44\x58\x46\x84\xed\xa2\x72\xf9\x4a\xb0\xec\x67\x5d\x58\x8d\x5c\xaa\x07\x9c\x99\x5e\x6a\xa9\x13\xb6\x83\x5a\xfd\x8e\x08\x02\x92\xe4\x7d\xa3\xa0\x56\xe6\x4b\x16\xe1\x33\xe0\xbb\x3f\xc0\x39\x3f\xf0\x0e\xe0\xe0\x11\x32\x41\x59\x0e\x76\x0f\xf6\x07\x48\x37\x14\x82\x92\x8f\xaf\x33\xed\x4b\x88\x56\x13\xfb\x75\xa2\x55\x34\x33\x0a\x5f\x4b\xb3\x42\xeb\x35\x9a\xb5\x21\x59\x4d\x96\xd5\x41\xba\x1d\xb1\xd7\x58\x66\xfa\xf2\x75\xa2\x15\xd6\x4a\xae\xbd\xec\xe8\x45\xdd\x27\x1c\x7b\xea\xf6\xcf\xf1\xcc\x98\x2f\xda\xed\xaf\x11\xac\x30\xf5\xff\x89\xb5\x6f\x4c\xea\x2f\x0c\xb8\x35\xbe\x6b\x16\x9b\x0f\xb0\xc6\xfc\x1e\x05\x53\xdf\x33\x1b\x1e\x60\xcb\x72\x9a\x82\x65\xab\x43\x0b\xce\x12\x8e\x00\x04\xc1\x09\x64\xf0\xf9\xb3\x11\xcd\xc5\x96\x14\x84\xbc\x06\xcb\xce\x2c\xf0\x3c\x78\x6b\x79\xd6\x5b\xf8\xfe\x7b\x73\xf0\x9d\x07\xd6\x1b\xeb\x2d\xdc\xdc\x20\x68\x30\xd5\x14\x49\x49\xa0\x62\xa5\x25\x9c\x11\x78\x0f\x96\xdd\x89\xcf\x6a\x01\x7e\xa6\x85\x0c\xb8\x97\xb6\x4c\xaf\xbc\x9a\x0d\xc2\xe1\x45\x7d\xfe\x0e\xb5\x77\xcc\x24\x18\x0e\xc2\x62\x2f\x21\xb8\x1c\xfc\x33\x98\x37\x3a\xd7\x3c\xc7\x5b\x26\xaa\x42\x9d\xc0\xc1\x63\x59\xa5\xfd\xc1\x11\x82\xcb\xf1\xf4\x4f\x29\x5b\x27\x96\xfd\x6e\xaf\x1f\xee\x85\xd8\xc2\xb3\xec\x2e\xa4\xae\x25\xbb\xe5\x0e\xec\x56\xe8\x90\xe2\x9c\xc8\x5c\x13\x54\x4d\x81\x72\xea\x50\x06\x65\x5c\xa5\xab\xa3\x33\xd0\x25\x2e\xbf\xa3\x97\xf5\x86\x2b\x73\xb3\x77\xed\xc2\x40\xb3\xa5\x6f\xb4\x52\xeb\xfb\xda\x58\x2e\x64\xab\x53\x41\xf2\xad\x60\x67\xa8\x7a\xc5\xa8\x92\xa3\xf2\x1c\x9c\x9e\xaa\xf4\x73\xbf\x26\x3c\xf9\xf4\xb7\x2f\x82\x4b\xdf\x3c\x50\x1b\x23\xed\xc4\x28\x3d\xf9\xfe\x47\xa8\xfe\x65\xe0\x22\x0c\x67\xd1\x2c\x98\x87\x56\x63\x72\x16\x6c\xac\xee\x3c\xeb\xe7\xd3\x9f\x4f\x2d\xa4\xba\xad\x56\x1d\xf9\xb3\x49\xf0\x31\x0a\x3f\xce\xfc\x67\x94\x1b\xb7\x9e\x15\x64\x84\x2d\xd4\x53\xd1\xd8\x68\x3c\x46\xf4\xe3\x44\x47\x6f\x48\x8c\xca\xc1\x54\x5d\x20\xf4\xf4\xf9\x55\x8f\xcd\xd1\x78\x0e\x76\xdb\x1e\x94\x13\xa4\xa2\x40\x63\x7d\xfc\x2f\x00\x00\xff\xff\x4e\xe9\x8d\xd3\xa6\x11\x00\x00")

func run_toolsShBytes() ([]byte, error) {
	return bindataRead(
		_run_toolsSh,
		"run_tools.sh",
	)
}

func run_toolsSh() (*asset, error) {
	bytes, err := run_toolsShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "run_tools.sh", size: 4518, mode: os.FileMode(420), modTime: time.Unix(1499776994, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"liveness_std.sh":  liveness_stdSh,
	"logback.xml":      logbackXml,
	"readiness_std.sh": readiness_stdSh,
	"run_tools.sh":     run_toolsSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"liveness_std.sh":  &bintree{liveness_stdSh, map[string]*bintree{}},
	"logback.xml":      &bintree{logbackXml, map[string]*bintree{}},
	"readiness_std.sh": &bintree{readiness_stdSh, map[string]*bintree{}},
	"run_tools.sh":     &bintree{run_toolsSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
