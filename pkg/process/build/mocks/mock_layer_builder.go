// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/process/build/build.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	docker "github.com/skatteetaten/architect/v2/pkg/docker"
	process "github.com/skatteetaten/architect/v2/pkg/process/build"
)

// MockBuilder is a mock of Builder interface.
type MockBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockBuilderMockRecorder
}

// MockBuilderMockRecorder is the mock recorder for MockBuilder.
type MockBuilderMockRecorder struct {
	mock *MockBuilder
}

// NewMockBuilder creates a new mock instance.
func NewMockBuilder(ctrl *gomock.Controller) *MockBuilder {
	mock := &MockBuilder{ctrl: ctrl}
	mock.recorder = &MockBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuilder) EXPECT() *MockBuilderMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockBuilder) Build(buildConfig docker.BuildConfig, baseimageLayers *process.LayerProvider) (*process.LayerProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build", buildConfig, baseimageLayers)
	ret0, _ := ret[0].(*process.LayerProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Build indicates an expected call of Build.
func (mr *MockBuilderMockRecorder) Build(buildConfig, baseimageLayers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockBuilder)(nil).Build), buildConfig, baseimageLayers)
}

// Pull mocks base method.
func (m *MockBuilder) Pull(ctx context.Context, buildConfig docker.BuildConfig) (*process.LayerProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pull", ctx, buildConfig)
	ret0, _ := ret[0].(*process.LayerProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pull indicates an expected call of Pull.
func (mr *MockBuilderMockRecorder) Pull(ctx, buildConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pull", reflect.TypeOf((*MockBuilder)(nil).Pull), ctx, buildConfig)
}

// Push mocks base method.
func (m *MockBuilder) Push(ctx context.Context, buildResult *process.LayerProvider, tag []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", ctx, buildResult, tag)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push.
func (mr *MockBuilderMockRecorder) Push(ctx, buildResult, tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockBuilder)(nil).Push), ctx, buildResult, tag)
}
